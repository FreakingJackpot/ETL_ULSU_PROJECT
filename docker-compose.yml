version: '3.8'
x-web-config: &web-config
  DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
  DJANGO_DEBUG: ${DJANGO_DEBUG}
  DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
  DJANGO_CSRF_TRUSTED_ORIGINS: ${DJANGO_CSRF_TRUSTED_ORIGINS}

  DB_NAME: ${DB_NAME}
  DB_USER: ${DB_USER}
  DB_PASS: ${DB_PASS}
  DB_HOST: ${DB_HOST}
  DB_PORT: ${DB_PORT}

  EXTERNAL_DB_NAME: ${EXTERNAL_DB_NAME}
  EXTERNAL_DB_USER: ${EXTERNAL_DB_USER}
  EXTERNAL_DB_PASS: ${EXTERNAL_DB_PASS}
  EXTERNAL_DB_HOST: ${EXTERNAL_DB_HOST}
  EXTERNAL_DB_PORT: ${EXTERNAL_DB_PORT}

  LOKI_HOST: ${LOKI_HOST}

x-airflow-config: &airflow-config
  <<: *web-config
  AIRFLOW__CORE__DAGS_FOLDER: /dags
  AIRFLOW__CORE__PLUGINS_FOLDER: /plugins
  AIRFLOW__CORE__EXECUTOR: CeleryExecutor
  AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
  AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql://airflow:${DB_AIRFLOW_PASS}@postgres:5432/airflow

  AIRFLOW__CORE__PARALLELISM: ${AIRFLOW_PARALLELISM}
  AIRFLOW__CORE__DAG_CONCURRENCY: ${AIRFLOW_DAG_CONCURRENCY}
  AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG: ${AIRFLOW_MAX_ACTIVE_RUNS_PER_DAG}
  AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW_CORE_LOAD_EXAMPLES}
  AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS: ${AIRFLOW_CORE_LOAD_DEFAULT_CONNECTIONS}
  AIRFLOW__CORE__DEFAULT_TIMEZONE: 'Europe/Moscow'

  AIRFLOW__EMAIL__DEFAULT_EMAIL_ON_RETRY: ${AIRFLOW_EMAIL_DEFAULT_EMAIL_ON_RETRY}
  AIRFLOW__EMAIL__DEFAULT_EMAIL_ON_FAILURE: ${AIRFLOW_EMAIL_DEFAULT_EMAIL_ON_FAILURE}

  AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
  AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:${DB_AIRFLOW_PASS}@postgres/airflow
  AIRFLOW_DJANGO_PATH_TO_SETTINGS_PY: /app/covid_dashboard

  AIRFLOW__SCHEDULER__STATSD_ON: "True"
  AIRFLOW__SCHEDULER__STATSD_HOST: statsd-exporter
  AIRFLOW__SCHEDULER__STATSD_PORT: 8125
  AIRFLOW__SCHEDULER__STATSD_PREFIX: airflow

  AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY}
  AIRFLOW__WEBSERVER__WEB_SERVER_PORT: 8081

  AIRFLOW__LOGGING__REMOTE_LOGGING: "True"
  AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: loki
  AIRFLOW__LOGGING__LOGGING_CONFIG_CLASS: log_config.DEFAULT_LOGGING_CONFIG
  AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: loki_conn
  AIRFLOW__LOGGING__BASE_LOG_FOLDER: "/opt/airflow/logs"
  AIRFLOW__LOGGING__LOGGING_LEVEL: "INFO" # DEBUG, INFO, WARNING, ERROR or CRITICAL.
  AIRFLOW__LOGGING__FAB_LOGGING_LEVEL: "WARNING"

  TELEPUSH_TOKEN: ${TELEPUSH_TOKEN}

x-airflow-base: &airflow-base
  build:
    context: ./
    dockerfile: ./airflow/Dockerfile
  restart: always
  volumes:
    - ./airflow/dags:/dags
    - ./app:/app
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
      PGUSER: ${DB_USER}
      POSTGRES_AIRFLOW_USER: airflow
      POSTGRES_AIRFLOW_PASSWORD: ${DB_AIRFLOW_PASS}
      POSTGRES_AIRFLOW_DB: airflow
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow", "&","pg_isready","-U", "$DB_USER", "--dbname", "DB_NAME" ]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  external_postgres:
    image: freakingjackpot/etl_project:external_database
    container_name: external_postgres
    restart: always
    environment:
      POSTGRES_USER: ${EXTERNAL_DB_USER}
      POSTGRES_PASSWORD: ${EXTERNAL_DB_PASS}
      POSTGRES_DB: ${EXTERNAL_DB_NAME}
    ports:
      - 5433:5433
    command: -p 5433


  web:
    build:
      context: ./
      dockerfile: ./app/Dockerfile
    container_name: web
    restart: always
    command: gunicorn covid_dashboard.wsgi:application --bind 0.0.0.0:8000
    expose:
      - 8000
    volumes:
      - static_volume:/home/app/web/static
    environment:
      <<: *web-config
      SERVICE_NAME: web

    depends_on:
      - postgres

  redis:
    container_name: redis
    image: redis:7.2.3-alpine
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow:
    <<: *airflow-base
    container_name: airflow
    environment:
      <<: *airflow-config
      AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: ${AIRFLOW_SCHEDULER_DAG_DIR_LIST_INTERVAL}
      AIRFLOW__SCHEDULER__CATCHUP_BY_DEFAULT: ${AIRFLOW_SCHEDULER_CATCHUP_BY_DEFAULT}
      AIRFLOW__SCHEDULER__MAX_THREADS: ${AIRFLOW_SCHEDULER_MAX_THREADS}

      AIRFLOW__WEBSERVER__LOG_FETCH_TIMEOUT_SEC: ${AIRFLOW_WEBSERVER_LOG_FETCH_TIMEOUT_SEC}


    command: >
      -c "sleep 10 &&
           /entrypoint db init &&
          /entrypoint connections add loki_conn --conn-uri http://loki:3100
          (/entrypoint webserver &) &&
          (/entrypoint celery flower &) &&
           /entrypoint scheduler"

    ports:
      # Celery Flower
      - 5555:5555
      # Airflow Webserver
      - 8081:8081

    depends_on:
      - postgres
      - redis

  worker:
    <<: *airflow-base
    container_name: airflow-worker
    environment:
      <<: *airflow-config
      SERVICE_NAME: worker

    command: -c " sleep 10 && /entrypoint celery worker"

    depends_on:
      - airflow
      - postgres
      - redis

    ports:
      - 8793:8793

  nginx:
    build: ./nginx
    container_name: nginx
    volumes:
      - static_volume:/home/app/web/static
      - nginx_log:/var/log/nginx
    ports:
      - 1337:80
    depends_on:
      - web

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    user: 1000:1000
    volumes:
      - ./loki/data:/loki:rw
      - ./loki/loki.yml:/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

    depends_on:
      - promtail

  promtail:
    image: grafana/promtail:2.9.2
    container_name: promtail
    volumes:
      - ./loki/promtail.yml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - nginx_log:/var/log/nginx

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    restart: unless-stopped
    environment:
      - SCRAPE_URI=http://nginx/status
      - TELEMETRY_PATH=/metrics
      - NGINX_RETRIES=10
    ports:
      - 9113:9113
    depends_on:
      - nginx

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USER}:${DB_PASS}@postgres:5432/${DB_NAME}?sslmode=disable
    ports:
      - 9187:9187
    depends_on:
      - postgres

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    command:
      - "--housekeeping_interval=30s"
      - "--docker_only=true"
      - "--disable_metrics=percpu,sched,tcp,udp,disk,diskIO,accelerator,hugetlb,referenced_memory,cpu_topology,resctrl"
    volumes:
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /sys:/sys:ro
      - /var/run:/var/run:ro
      - /:/rootfs:ro
      - /sys/fs/cgroup:/cgroup:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /etc/localtime:/etc/localtime:ro
    privileged: true
    restart: unless-stopped
    ports:
      - "8080:8080"
    devices:
      - "/dev/kmsg"

  blackbox-exporter:
    image: "prom/blackbox-exporter:latest"
    container_name: blackbox-exporter
    restart: always
    volumes:
      - "./prometheus/blackbox-exporter.yml:/etc/prometheus/blackbox-exporter.yml"
    command:
      - "--config.file=/etc/prometheus/blackbox-exporter.yml"
    ports:
      - 9115:9115

  statsd-exporter:
    image: prom/statsd-exporter
    container_name: airflow-statsd-exporter
    command: "--statsd.listen-udp=:8125 --web.listen-address=:9102"
    ports:
      - 9123:9102
      - 8125:8125/udp

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    ports:
      - 9093:9093

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    restart: always
    volumes:
      - prometheus_volume:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090

  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}
    restart: unless-stopped
    ports:
      - 3000:3000

  telepush:
    #https://github.com/muety/telepush
    container_name: telepush
    image: ghcr.io/muety/telepush
    environment:
      APP_TOKEN: ${BOTFATHER_TOKEN}
      APP_MODE: ${TELEPUSH_MODE}
      APP_USE_HTTPS: ${TELEPUSH_USE_HTTPS}
      APP_CERT_PATH: ${TELEPUSH_CERT_PATH}
      APP_KEY_PATH: ${TELEPUSH_KEY_PATH}
      APP_BLACKLIST: ${TELEPUSH_BLACKLIST}
      APP_WHITELIST: ${TELEPUSH_WHITELIST}
    command: -port 8083
    volumes:
      - telepush_data:/srv/data
    ports:
      - 8083:8083

volumes:
  postgres_data:
  static_volume:
  prometheus_volume:
  grafana_data:
  nginx_log:
  telepush_data:
