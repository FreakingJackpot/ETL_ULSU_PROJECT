version: '3.8'
services:
  postgres:
    image: postgres
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
      PGUSER: ${DB_USER}
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  external_postgres:
    image: freakingjackpot/etl_project:external_database
    container_name: external_postgres
    restart: always
    environment:
      POSTGRES_USER: ${EXTERNAL_DB_USER}
      POSTGRES_PASSWORD: ${EXTERNAL_DB_PASS}
      POSTGRES_DB: ${EXTERNAL_DB_NAME}
    ports:
      - 5433:5433

  web:
    build: .
    container_name: web
    command: uvicorn covid_dashboard.asgi:application --host 0.0.0.0 --port 8000
    expose:
      - 8000
    volumes:
      - static_volume:/home/app/web/static
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      DJANGO_CSRF_TRUSTED_ORIGINS: ${DJANGO_CSRF_TRUSTED_ORIGINS}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      LOKI_HOST: ${LOKI_HOST}

    depends_on:
      - postgres

  nginx:
    build: ./nginx
    container_name: nginx
    volumes:
      - static_volume:/home/app/web/static
      - nginx_log:/var/log/nginx
    ports:
      - 1337:80
    depends_on:
      - web

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    user: 1000:1000
    ports:
      - "3100:3100"
    volumes:
      - ./loki/data:/loki:rw
      - ./loki/loki.yml:/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:2.9.2
    container_name: promtail
    volumes:
      - ./loki/promtail.yml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - nginx_log:/var/log/nginx

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100


  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    restart: unless-stopped
    environment:
      - SCRAPE_URI=http://nginx/status
      - TELEMETRY_PATH=/metrics
      - NGINX_RETRIES=10
    ports:
      - 9113:9113
    depends_on:
      - nginx

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USER}:${DB_PASS}@postgres:5432/${DB_NAME}?sslmode=disable
    ports:
      - 9187:9187
    depends_on:
      - postgres

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8080:8080"
    devices:
      - "/dev/kmsg"
    command:
      - "--housekeeping_interval=30s"
      - "--docker_only=true"
      - "--disable_metrics=percpu,sched,tcp,udp,disk,diskIO,accelerator,hugetlb,referenced_memory,cpu_topology,resctrl"
    volumes:
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /sys:/sys:ro
      - /var/run:/var/run:ro
      - /:/rootfs:ro
      - /sys/fs/cgroup:/cgroup:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /etc/localtime:/etc/localtime:ro
    privileged: true
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    restart: always
    command:
      - '-config.file=/etc/alertmanager/config.yml'
      - '-storage.path=/alertmanager'

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    volumes:
      - prometheus_volume:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090

  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    ports:
      - 3000:3000

volumes:
  postgres_data:
  static_volume:
  prometheus_volume:
  grafana_data:
  nginx_log:
